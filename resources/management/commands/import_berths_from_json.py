"""
This command creates or updates Harbor, Pier and Berth objects
based on a JSON that has the following structure for its items:

"40393": {  # Harbor's servicemap ID
    "piers": {
        "A": {   # Pier identifier
            "3": {   # Berth number
                "width": "200",
                "length": "400",
                "type": "ILMAN PERÄKIINNITYSTÄ"
            },
            "4": {
                "width": "200",
                "length": "400",
                "type": "AISAPAIKKA"
            }
            "5": {
                "width": "200",
                "length": "400",
                "type": "PERÄPOIJUPAIKKA"
            } ...
        } ...
    }
}, ...

This JSON is generated by the scripts/parse_harbors_csv.py script
from a csv file exported from the old management system.

This management command is intended to be used once, after that
the DB data should be dumped as fixtures.

"""
import json

from django.conf import settings
from django.core.management.base import BaseCommand, CommandError
from django.db import transaction
from django.utils import translation
from parler.utils.context import switch_language

from harbors.models import Harbor as OldHarbor
from resources.enums import BerthMooringType
from resources.models import Berth, BerthType, Harbor, Pier

MOORING_TYPES_MAP = {
    "ILMAN PERÄKIINNITYSTÄ": BerthMooringType.NO_STERN_TO_MOORING,
    "AISAPAIKKA": BerthMooringType.SINGLE_SLIP_PLACE,
    "KÄVELYAISAPAIKKA": BerthMooringType.SIDE_SLIP_PLACE,
    "PERÄPOIJUPAIKKA": BerthMooringType.STERN_BUOY_PLACE,
    "PAALUPERÄKIINNITYS": BerthMooringType.STERN_POLE_MOORING,
    "SIVUKIINNITYS": BerthMooringType.QUAYSIDE_MOORING,
    "JOLLAPAIKKA": BerthMooringType.DINGHY_PLACE,
    "POIJU (MERELLÄ)": BerthMooringType.SEA_BUOY_MOORING,
    "TRAILERIPAIKKA": BerthMooringType.TRAWLER_PLACE,
}


OLD_HARBORS_TO_PIERS_MAP = {
    "airorannan venesatama (a)": "airorannan venesatama a",
    "airorannan venesatama (b)": "airorannan venesatama b",
    "merisatama (ehrenströmintie 21) (21)": "merisatama (ehrenströmintie 21)",
    "merisatama (ehrenströmintie 21) (22)": "merisatama (ehrenströmintie 22)",
    "hietalahdenallas / venesatama (-)": "hietalahdenallas / venesatama",
    "katajanokan venesatama (b)": "katajanokan venesatama",
    "kipparlahden venesatama (63)": "kipparlahden venesatama",
    "kipparlahden venesatama (65)": "kipparlahden venesatama",
    "laivalahden venesatama (a)": "laivalahden venesatama",
    "laivalahden venesatama (b)": "laivalahden venesatama",
    "laivalahden venesatama (c)": "laivalahden venesatama",
    "laivalahden venesatama (d)": "laivalahden venesatama",
    "merihaan venesatama (hakaniemenranta 13) (-)": "merihaan venesatama (hakaniemenranta 13)",
    "merihaan venesatama (hakaniemenranta 13) (f)": "merihaan venesatama (hakaniemenranta 30)",
    "mustikkamaan venesatama (a)": "mustikkamaan venesatama",
    "mustikkamaan venesatama (b)": "mustikkamaan venesatama",
    "pajalahden venesatama (meripuistotie) / venesatama (10)": "pajalahden venesatama (meripuistotie) / venesatama",
    "pajalahden venesatama (meripuistotie) / venesatama (11 a)": "pajalahden venesatama (meripuistotie) / venesatama",
    "pajalahden venesatama (meripuistotie) / venesatama (11 b)": "pajalahden venesatama (meripuistotie) / venesatama",
    "pajalahden venesatama (meripuistotie) / venesatama (19 a)": "pajalahden venesatama (meripuistotie) / venesatama",
    "pajalahden venesatama (meripuistotie) / venesatama (19 b)": "pajalahden venesatama (meripuistotie) / venesatama",
    "tammasaaren allas (-)": "tammasaaren allas (paikat 1-31)",
}


PROPER_HARBOR_NAMES = {
    "Airorannan venesatama A": "Airorannan venesatama",
    "Årstrands småbåtshamn A": "Årstrands småbåtshamn",
    "Ramsaynrannan venesatama (A) (Ramsaynranta 4)": "Ramsaynrannan venesatama (Ramsaynranta 4)",
    "Ramsays strands småbåtshamn (A) (Ramsays strand 4)": "Ramsays strands småbåtshamn (Ramsays strand 4)",
    "Tammasaaren allas (paikat 1-31)": "Tammasaaren allas",
    "Märaholmsbassängen (platser 1-31)": "Märaholmsbassängen",
}


class Command(BaseCommand):
    def __init__(self, *args, **kwargs):
        raise DeprecationWarning(
            "This command imports berth dimensions in centimeters / integers, "
            "when the model uses now meters / decimals. Update it before using."
        )
        super().__init__(*args, **kwargs)
        self.number_of_created_berths = 0
        self.number_of_modified_berths = 0
        self.missing_old_harbors = []
        self.missing_piers = []

    def add_arguments(self, parser):
        parser.add_argument(
            "--file",
            action="store",
            dest="file",
            help="Path to JSON file with harbors' data",
        )

    def handle(self, **options):
        json_filepath = options["file"]
        if not json_filepath:
            raise CommandError("No path to JSON file provided")

        with open(json_filepath, "r") as json_file:
            harbors_dict = json.load(json_file)
            for harbor_servicemap_id, harbor_data in harbors_dict.items():
                with transaction.atomic():
                    harbor, _ = Harbor.objects.get_or_create(
                        servicemap_id=harbor_servicemap_id,
                        defaults={"zip_code": "00100"},
                    )

                    old_harbors = OldHarbor.objects.filter(
                        servicemap_id=harbor_servicemap_id
                    )

                    if old_harbors.count() == 1:
                        # there was only one old harbor,
                        # i.e. all piers have the same services
                        old_harbor = old_harbors.first()
                        self._import_harbor_data_from_old_harbor(harbor, old_harbor)
                        self._import_piers_from_single_old_harbor(
                            harbor, old_harbor, harbor_data.get("piers", {})
                        )

                    elif old_harbors.count() > 1:
                        # there were several old harbors,
                        # map old harbors to new harbors and piers
                        self._import_harbor_data_from_old_harbor(
                            harbor, old_harbors.first()
                        )
                        self._import_piers_from_old_harbors(
                            harbor, old_harbors, harbor_data.get("piers", {})
                        )

                    else:
                        self.missing_old_harbors.append(harbor_servicemap_id)

        self.stdout.write("Created {} berths".format(self.number_of_created_berths))
        self.stdout.write("Modified {} berths".format(self.number_of_modified_berths))

        if self.missing_old_harbors:
            self.stderr.write(
                "Following servicemap IDs had no existing harbors: {}".format(
                    ", ".join(self.missing_old_harbors)
                )
            )

        if self.missing_piers:
            self.stderr.write(
                "Following piers are could not be mapped to old harbors:\n{}".format(
                    "\n".join(self.missing_piers)
                )
            )

    @staticmethod
    def _import_harbor_data_from_old_harbor(harbor, old_harbor):
        harbor.zip_code = old_harbor.zip_code
        harbor.phone = old_harbor.phone
        harbor.email = old_harbor.email
        harbor.www_url = old_harbor.www_url
        harbor.location = old_harbor.location
        harbor.municipality = old_harbor.municipality
        harbor.image_link = old_harbor.image_link

        for lang, _ in settings.LANGUAGES:
            with switch_language(harbor, lang):
                old_name = old_harbor.safe_translation_getter(
                    "name", language_code=lang
                )
                if old_name in PROPER_HARBOR_NAMES:
                    old_name = PROPER_HARBOR_NAMES[old_name]
                harbor.name = old_name
                harbor.street_address = old_harbor.safe_translation_getter(
                    "street_address", language_code=lang
                )
                harbor.save()

    def _import_piers_from_single_old_harbor(self, harbor, old_harbor, piers_dict):
        for pier_identifier, pier_data in piers_dict.items():
            pier_identifier = self._parse_pier_identifier(pier_identifier)

            pier, _ = Pier.objects.get_or_create(
                harbor=harbor, identifier=pier_identifier
            )
            self._import_pier_info(pier, old_harbor)

            for boat_type in old_harbor.suitable_boat_types.all():
                pier.suitable_boat_types.add(boat_type.id)  # IDs are the same

            self._import_berths(pier, pier_data)

    def _import_piers_from_old_harbors(self, harbor, old_harbors, piers_dict):
        for pier_identifier, pier_data in piers_dict.items():
            pier_identifier = self._parse_pier_identifier(pier_identifier)

            pier, _ = Pier.objects.get_or_create(
                harbor=harbor, identifier=pier_identifier
            )

            with translation.override("fi"):
                pier_name = str(pier).lower()

            for old_harbor in old_harbors:
                old_harbor_name = old_harbor.name.lower()

                if (
                    pier_name == old_harbor_name
                    or OLD_HARBORS_TO_PIERS_MAP.get(pier_name) == old_harbor_name
                ):
                    self._import_pier_info(pier, old_harbor)

                    for boat_type in old_harbor.suitable_boat_types.all():
                        pier.suitable_boat_types.add(boat_type.id)  # IDs are the same

                    continue

                else:
                    self.missing_piers.append(pier_name)

            self._import_berths(pier, pier_data)

    def _import_berths(self, pier, pier_data):
        for berth_number, berth_data in pier_data.items():
            if len(berth_number) == 1:
                # prepend 0 to number before 10
                berth_number = str(berth_number).zfill(2)

            berth_type, _ = BerthType.objects.get_or_create(
                width=berth_data.get("width", 0),
                length=berth_data.get("length", 0),
                mooring_type=MOORING_TYPES_MAP.get(berth_data.get("type")),
            )

            _, created = Berth.objects.update_or_create(
                pier=pier, number=berth_number, defaults={"berth_type": berth_type}
            )
            if created:
                self.number_of_created_berths += 1
            else:
                self.number_of_modified_berths += 1

    @staticmethod
    def _parse_pier_identifier(pier_identifier):
        # Catch some non-standard pier_identifiers and normalize others
        if pier_identifier == "MERISATAMANRANTA 20":
            pier_identifier = "-"
        elif pier_identifier == "RAMSAYRANTA A":
            pier_identifier = "A"
        elif pier_identifier == "RAMSAYRANTA B":
            pier_identifier = "B"
        elif pier_identifier == "TR":
            pass
        else:
            pier_identifier = pier_identifier.strip().capitalize()
        return pier_identifier

    @staticmethod
    def _import_pier_info(pier, old_harbor):
        pier.location = old_harbor.location
        pier.electricity = old_harbor.electricity
        pier.water = old_harbor.water
        pier.gate = old_harbor.gate
        pier.mooring = old_harbor.mooring
        pier.waste_collection = old_harbor.waste_collection
        pier.lighting = old_harbor.lighting
        pier.save()
