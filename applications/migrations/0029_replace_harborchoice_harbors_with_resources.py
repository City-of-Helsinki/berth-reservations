# Generated by Django 3.1 on 2021-03-25 08:10

from django.db import migrations, models
import django.db.models.deletion


def copy_harbor_choices(apps, schema_editor):
    HarborChoice = apps.get_model("applications", "HarborChoice")
    TmpHarborChoice = apps.get_model("applications", "TmpHarborChoice")
    Harbor = apps.get_model("resources", "Harbor")

    for choice in HarborChoice.objects.all():
        TmpHarborChoice.objects.create(
            id=choice.id,
            priority=choice.priority,
            harbor=Harbor.objects.filter(
                servicemap_id=choice.harbor.servicemap_id
            ).first(),
            application=choice.application,
        )


def restore_harbor_choices(apps, schema_editor):
    TmpHarborChoice = apps.get_model("applications", "TmpHarborChoice")
    HarborChoice = apps.get_model("applications", "HarborChoice")

    for choice in HarborChoice.objects.all():
        choice.harbor = TmpHarborChoice.objects.get(id=choice.id).harbor
        choice.save()


class Migration(migrations.Migration):

    dependencies = [
        ("resources", "0027_map_harbors_with_resources"),
        ("applications", "0028_replace_berth_switch_harbor_with_resources"),
    ]

    operations = [
        # Create a temporary through model
        migrations.CreateModel(
            name="TmpHarborChoice",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("priority", models.PositiveSmallIntegerField(verbose_name="priority")),
                (
                    "harbor",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="resources.Harbor",
                        blank=True,
                        null=True,
                    ),
                ),
                (
                    "application",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="applications.BerthApplication",
                        blank=True,
                        null=True,
                    ),
                ),
            ],
        ),
        # Create the relation through the temporary model
        migrations.AddField(
            model_name="berthapplication",
            name="tmp_chosen_harbors",
            field=models.ManyToManyField(
                blank=True,
                through="applications.TmpHarborChoice",
                to="resources.Harbor",
                verbose_name="chosen harbors",
            ),
        ),
        # Copy the data to the new through field
        migrations.RunPython(
            copy_harbor_choices, reverse_code=migrations.RunPython.noop
        ),
        # Hard reset for HarborChoice.harbor
        migrations.RemoveField(model_name="harborchoice", name="harbor"),
        migrations.AddField(
            model_name="harborchoice",
            name="harbor",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                to="resources.harbor",
                null=True,
                blank=True,
            ),
        ),
        # Replace the correct values for HarborChoice.harbor
        migrations.RunPython(
            restore_harbor_choices, reverse_code=migrations.RunPython.noop
        ),
        # Add the non-null constraint for HarborChoice.harbor
        migrations.AlterField(
            model_name="harborchoice",
            name="harbor",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="resources.harbor",
            ),
        ),
        # Point the BerthApplication to the right choice model
        migrations.AlterField(
            model_name="berthapplication",
            name="chosen_harbors",
            field=models.ManyToManyField(
                blank=True,
                through="applications.HarborChoice",
                to="resources.Harbor",
                verbose_name="chosen harbors",
            ),
        ),
        # Drop the old through model and field
        migrations.DeleteModel(name="TmpHarborChoice"),
        migrations.RemoveField(
            model_name="berthapplication", name="tmp_chosen_harbors",
        ),
    ]
