# Generated by Django 2.1.2 on 2019-01-17 07:13
import logging
from decimal import Decimal, InvalidOperation
from functools import reduce

from django.db import IntegrityError, migrations, transaction

logger = logging.getLogger(__name__)

CHAR_FIELDS_TO_DATA_KEY_MAP = {
    "phone_number": "applicant.contact.mobile_phone",
    "address": "applicant.postal.street_address",
    "zip_code": "applicant.postal.postal_code",
    "municipality": "applicant.postal.munacipality",
    "company_name": "applicant.company.name",
    "business_id": "applicant.company.businessId",
    "boat_registration_number": "boat.register_number",
    "boat_name": "boat.name",
    "boat_model": "boat.model",
    "boat_propulsion": "boat.big_ships.propulsion",
    "boat_hull_material": "boat.big_ships.hull_material",
    "boat_intended_use": "boat.big_ships.usage",
    "renting_period": "boat.big_ships.time_period",
    "rent_from": "boat.big_ships.time_period_from",
    "rent_till": "boat.big_ships.time_period_to",
    "language": "locale",
}

DECIMAL_FIELDS_TO_DATA_KEY_MAP = {
    "boat_length": "boat.length",
    "boat_width": "boat.width",
    "boat_draught": "boat.draught",
}

BOOLEAN_FIELDS_TO_DATA_KEY_MAP = {
    "accessibility_required": "boat.accessibility",
    "boat_is_inspected": "boat.big_ships.inspected",
    "boat_is_insured": "boat.big_ships.insurance",
    "agree_to_terms": "boat.big_ships.agreed",
    "accept_boating_newsletter": "overview.receivable_boating_info",
    "accept_fitness_news": "overview.receivable_fitness_services",
    "accept_library_news": "overview.receivable_library_services",
    "accept_other_culture_news": "overview.receivable_other_cultural_services",
    "information_accuracy_confirmed": "overview.guarantee",
}


def deep_get(dictionary, keys, default=None):
    """
    Get nested value from a dict without raising KeyError
    if any of the keys do not exist.

    Example for the keys path: "applicant.company.name"
    """
    return reduce(
        lambda d, key: d.get(key, default) if isinstance(d, dict) else default,
        keys.split("."),
        dictionary,
    )


def from_data_to_main_fields(apps, schema_editor):
    Harbor = apps.get_model("harbors", "Harbor")
    BoatType = apps.get_model("harbors", "BoatType")
    Reservation = apps.get_model("applications", "Reservation")
    HarborChoice = apps.get_model("applications", "HarborChoice")

    for r in Reservation.objects.all():
        if r.data and r.data != {}:
            with transaction.atomic():
                chosen_harbors = r.data.get("selectedBerths", [])
                for index, harbor_identifier in enumerate(chosen_harbors, 1):
                    harbor = Harbor.objects.filter(identifier=harbor_identifier).first()
                    if harbor:
                        try:
                            HarborChoice.objects.create(
                                reservation=r, harbor=harbor, priority=index
                            )
                        except IntegrityError as e:
                            logger.error(
                                e,
                                exc_info=True,
                                extra={
                                    "reservation_id": r.id,
                                    "harbor": harbor_identifier,
                                    "priority": index,
                                },
                            )
                    else:
                        logger.error(
                            "Could not find harbor with identifier {}".format(
                                harbor_identifier
                            )
                        )

                boat_type = deep_get(r.data, "boat.type")
                if boat_type:
                    boat_type_obj = BoatType.objects.filter(
                        identifier=boat_type
                    ).first()
                    if boat_type_obj:
                        r.boat_type = boat_type_obj

                for attr_name, data_address in CHAR_FIELDS_TO_DATA_KEY_MAP.items():
                    value = deep_get(r.data, data_address)
                    if value:
                        setattr(r, attr_name, value)

                boat_weight = deep_get(r.data, "boat.weight")
                if boat_weight:
                    try:
                        r.boat_weight = int(boat_weight)
                    except (TypeError, ValueError) as e:
                        logger.error(e, exc_info=True, extra={"reservation_id": r.id})

                for attr_name, data_address in DECIMAL_FIELDS_TO_DATA_KEY_MAP.items():
                    value = deep_get(r.data, data_address)
                    if value:
                        no_commas_value = value.replace(",", ".")
                        try:
                            setattr(r, attr_name, Decimal(no_commas_value))
                        except InvalidOperation as e:
                            logger.error(
                                e,
                                exc_info=True,
                                extra={
                                    "reservation_id": r.id,
                                    "value_passed_to_decimal": no_commas_value,
                                },
                            )

                for attr_name, data_address in BOOLEAN_FIELDS_TO_DATA_KEY_MAP.items():
                    value = deep_get(r.data, data_address)
                    if value:
                        setattr(r, attr_name, True)

                r.save()


class Migration(migrations.Migration):

    dependencies = [("applications", "0002_add_main_fields")]

    operations = [
        migrations.RunPython(from_data_to_main_fields, migrations.RunPython.noop)
    ]
