name: Build & Review
on: 
  pull_request:
  workflow_dispatch:
    inputs:
      build_required:
        description: "Build images (true/false). Note that PR environment is deployed with versions merged with target, so manual deploy needs to build image (at least first time)"
        required: true
        default: "true"
      pr_number:
        description: "Pull request number (if redeploy without build) or own number for environment"
        required: true

env:
  CONTAINER_REGISTRY: ghcr.io
  CONTAINER_REGISTRY_USER: ${{ secrets.GHCR_CONTAINER_REGISTRY_USER }}
  CONTAINER_REGISTRY_PASSWORD: ${{ secrets.GHCR_TOKEN }}
  CONTAINER_REGISTRY_REPO: ghcr.io/city-of-helsinki/${{ github.event.repository.name }}
  REPO_NAME: ${{ github.event.repository.name }}
  KUBECONFIG_RAW: ${{ secrets.KUBECONFIG_RAW }}
  BUILD_ARTIFACT_FOLDER: "build_artifacts"
  SERVICE_ARTIFACT_FOLDER: "service_artifacts"
  BASE_DOMAIN: ${{ secrets.BASE_DOMAIN_STAGING }}
  DATABASE_USER: user
  DATABASE_PASSWORD: testing-password
  APP_MIGRATE_COMMAND: /app/.prod/on_deploy.sh
  APP_INITIALIZE_COMMAND: /app/.prod/on_initialize.sh
  K8S_REQUEST_CPU: 100m
  K8S_REQUEST_RAM: 300Mi
  K8S_LIMIT_CPU: 1000m
  K8S_LIMIT_RAM: 400Mi

jobs:
  build:
    runs-on: ubuntu-latest
    name: Build
    steps:
      - uses: actions/checkout@v2
      - name: Build
        if: github.event_name == 'pull_request' || github.event.inputs.build_required == 'true'
        uses: andersinno/kolga-build-action@v2

  review:
    runs-on: ubuntu-latest
    needs: build
    name: Review
    steps:
      - uses: actions/checkout@v2

      - name: Parse branch from event
        id: branch
        run: |
          branch=$(echo ${{ github.event.ref }} | sed 's/refs\/heads\///')
          echo "::set-output name=manual_branch::$branch"

      - uses: andersinno/kolga-setup-action@v2
        with:
          head_ref: ${{ steps.branch.outputs.manual_branch }}
          pr_number: ${{ github.event.inputs.pr_number }}

      - name: Review-Services
        uses: City-of-Helsinki/review-services-action@main
        with:
          database: ${{ env.K8S_NAMESPACE }}
          namespace: ${{ env.K8S_NAMESPACE }}
          action: create
          db_user: ${{ secrets.K8S_SECRET_DATABASE_ADMIN_USERNAME_REVIEW }}
          db_password: ${{ secrets.K8S_SECRET_DATABASE_ADMIN_PASSWORD_REVIEW }}
          db_host: ${{ secrets.K8S_SECRET_DATABASE_HOST_REVIEW }}
          db_port: ${{ secrets.K8S_SECRET_DATABASE_PORT_REVIEW }}
          kubeconfig: ${{ secrets.KUBECONFIG_RAW }}

      - name: Deploy
        uses: andersinno/kolga-deploy-action@v2
        env:
          ENVIRONMENT_URL: https://${{ env.K8S_NAMESPACE }}.${{ env.BASE_DOMAIN }}
          K8S_SECRET_ALLOWED_HOSTS: "*"
          K8S_SECRET_DEBUG: 1
          K8S_SECRET_CREATE_SUPERUSER: 1
          K8S_SECRET_CHECK_MIGRATIONS: 1
          K8S_SECRET_SECRET_KEY: ${{ secrets.GH_TEST_DJANGO_SECRET_KEY }}
          # Application uses only URL of DB, so have to build it here
          K8S_SECRET_DATABASE_URL: postgis://${{ secrets.K8S_SECRET_DATABASE_USERNAME_REVIEW }}:${{ secrets.K8S_SECRET_DATABASE_PASSWORD_REVIEW }}@${{ secrets.K8S_SECRET_DATABASE_HOST_REVIEW }}:${{ secrets.K8S_SECRET_DATABASE_PORT_REVIEW }}/${{ env.K8S_NAMESPACE }}
          K8S_SECRET_DATABASE_HOST: ${{ secrets.K8S_SECRET_DATABASE_HOST_REVIEW }}
          K8S_SECRET_DATABASE_PORT: ${{ secrets.K8S_SECRET_DATABASE_PORT_REVIEW }}
          K8S_SECRET_DATABASE_DB: ${{ env.K8S_NAMESPACE }}
          K8S_SECRET_DATABASE_USERNAME: ${{ secrets.K8S_SECRET_DATABASE_USERNAME_REVIEW }}
          K8S_SECRET_DATABASE_PASSWORD: ${{ secrets.K8S_SECRET_DATABASE_PASSWORD_REVIEW }}
          K8S_SECRET_TOKEN_AUTH_AUTHSERVER_URL: "https://tunnistamo.test.kuva.hel.ninja/openid"
          K8S_SECRET_CORS_ORIGIN_ALLOW_ALL: 1
          K8S_SECRET_VENE_UI_RETURN_URL: "https://venepaikat.hel.ninja/{LANG}"
          K8S_SECRET_VENE_PAYMENTS_BAMBORA_API_URL: "https://real-bambora-api-url/api"
          K8S_SECRET_VENE_PAYMENTS_BAMBORA_API_KEY: "dummy-key"
          K8S_SECRET_VENE_PAYMENTS_BAMBORA_API_SECRET: "dummy-secret"
          K8S_SECRET_VENE_PAYMENTS_BAMBORA_PAYMENT_METHODS: "dummy-bank"
          K8S_SECRET_PROFILE_API_URL: "https://profiili-api.test.kuva.hel.ninja/graphql/"
          K8S_SECRET_VISMASIGN_API_URL: ${{ secrets.GH_TEST_VISMASIGN_API_URL }}
          K8S_SECRET_VISMASIGN_CLIENT_IDENTIFIER: ${{ secrets.GH_TEST_VISMASIGN_CLIENT_IDENTIFIER }}
          K8S_SECRET_VISMASIGN_SECRET: ${{ secrets.GH_TEST_VISMASIGN_SECRET }}
          K8S_SECRET_VISMASIGN_TEST_SSN: ${{ secrets.GH_TEST_VISMASIGN_TEST_SSN }}
          K8S_SECRET_NOTIFICATION_SERVICE_API_URL: "http://fake-notification-api.example.com/v1"
          K8S_SECRET_NOTIFICATION_SERVICE_TOKEN: "dummy-notification-token"
          K8S_SECRET_NOTIFICATION_SERVICE_SENDER_NAME: "Hel.fi"
          K8S_SECRET_ORDER_EXPIRATION_CRONJOB_ENABLED: "true"
          K8S_SECRET_OFFER_EXPIRATION_CRONJOB_ENABLED: "true"

      - name: Deploy Order Expiration Cronjob
        uses: City-of-Helsinki/setup-cronjob-action@main
        with:
          image_repository: ghcr.io/city-of-helsinki/${{ github.event.repository.name }}
          image_tag:  ${{ github.sha }}
          kubeconfig_raw: ${{ env.KUBECONFIG_RAW}}
          target_namespace: ${{ env.K8S_NAMESPACE }}
          single_run: true
          secret_name: "-secret"
          name: "order-expiration-cronjob-review"
          command: "{/bin/sh}"
          args: "{-c,cd /app && /usr/bin/timeout --kill-after=20m 19m python manage.py expire_too_old_unpaid_orders 2>&1}"

      - name: Deploy Offer Expiration Cronjob
        uses: City-of-Helsinki/setup-cronjob-action@main
        with:
          image_repository: ghcr.io/city-of-helsinki/${{ github.event.repository.name }}
          image_tag:  ${{ github.sha }}
          kubeconfig_raw: ${{ env.KUBECONFIG_RAW}}
          target_namespace: ${{ env.K8S_NAMESPACE }}
          single_run: true
          secret_name: "-secret"
          name: "offer-expiration-cronjob-review"
          command: "{/bin/sh}"
          args: "{-c,cd /app && /usr/bin/timeout --kill-after=20m 19m python manage.py expire_too_old_offers 2>&1}"
